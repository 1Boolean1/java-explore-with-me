{
  "info": {
    "_postman_id": "278e5aca-4b45-4190-a897-ed408259ce2f",
    "name": "features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "42456056"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Add user",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
                  "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"user\",\r\n    \"email\": \"user@gmail.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Add user2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
                  "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"user2\",\r\n    \"email\": \"user2@gmail.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Categories",
      "item": [
        {
          "name": "Add category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"NewCategory\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "Add Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
                  "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
                  "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
                  "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
                  "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
                  "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
                  "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
                  "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
                  "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"annotation\": \"it's new eventttttttttttttttttttttttttttttttt\",\r\n    \"category\": 1,\r\n    \"description\": \"it's new eventttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt\",\r\n    \"eventDate\": \"2025-08-21 12:00:00\",\r\n    \"location\": {\r\n        \"lat\": 99.9999,\r\n        \"lon\": 99.9999\r\n    },\r\n    \"paid\": \"true\",\r\n    \"participantLimit\": \"100\",\r\n    \"requestModeration\": \"true\",\r\n    \"title\": \"newEvent\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "query": [
                {
                  "key": "",
                  "value": null,
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Public event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Добавление комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Тело ответа содержит все необходимые поля комментария\", function () {\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData).to.have.property('text');\r",
                  "    pm.expect(jsonData).to.have.property('user');\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе соответствуют отправленным\", function () {\r",
                  "    const sentBody = JSON.parse(pm.request.body.raw);\r",
                  "    const userId = pm.collectionVariables.get(\"userId\");\r",
                  "    const eventId = pm.collectionVariables.get(\"eventId\");\r",
                  "    \r",
                  "    pm.expect(jsonData.text).to.eql(sentBody.text, \"Текст комментария не совпадает\");\r",
                  " \r",
                  "    pm.expect(jsonData.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, \"Формат даты создания некорректен\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"new commentttttt\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление второго комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Тело ответа содержит все необходимые поля комментария\", function () {\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData).to.have.property('text');\r",
                  "    pm.expect(jsonData).to.have.property('user');\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе соответствуют отправленным\", function () {\r",
                  "    const sentBody = JSON.parse(pm.request.body.raw);\r",
                  "    const userId = pm.collectionVariables.get(\"userId\");\r",
                  "    const eventId = pm.collectionVariables.get(\"eventId\");\r",
                  "    \r",
                  "    pm.expect(jsonData.text).to.eql(sentBody.text, \"Текст комментария не совпадает\");\r",
                  "\r",
                  "    pm.expect(jsonData.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, \"Формат даты создания некорректен\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\":\"xxxxxxxxx\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Добавление комментария без текста(409)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 409 Conflict\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Тело ответа должно быть в формате JSON и содержать сообщение об ошибке\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    \r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('error');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\":\"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментариев события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и быть JSON-массивом\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    pm.expect(pm.response.json()).to.be.an('array');\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Ответ должен содержать 2 комментария с правильным текстом\", function () {\r",
                  "    pm.expect(jsonData.length).to.equal(2, \"Ожидалось найти 2 комментария\");\r",
                  "    pm.expect(jsonData[0].text).to.equal(\"new commentttttt\");\r",
                  "    pm.expect(jsonData[1].text).to.equal(\"xxxxxxxxx\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментариев несуществующего события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 Not Found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Тело ответа должно быть в формате JSON и содержать сообщение об ошибке\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('error');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментария по id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и быть в формате JSON\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"id в запросе и в ответе должны совпадать\", function () {\r",
                  "    pm.expect(jsonData.id).to.equal(1);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение несуществующего комментария по id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 404 Not Found\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Тело ответа должно быть в формате JSON и содержать сообщение об ошибке\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    \r",
                  "    const jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('error');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "1"
                },
                {
                  "key": "commentId",
                  "value": "3"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
                  "    pm.response.to.have.status(204);\r",
                  "});\r",
                  "\r",
                  "const req = {\r",
                  "    url: \"http://localhost:8080/events/1/comment/2\",\r",
                  "    method: \"GET\",\r",
                  "    header: { \"Content-Type\": \"application/json\" }\r",
                  "};\r",
                  "            \r",
                  "pm.sendRequest(req, (error, response) => {\r",
                  "    pm.test(\"Комментарий должен быть удалён (проверка возвращает 404)\", function() {\r",
                  "        pm.expect(response.code).to.eql(404);\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "\r",
                  "pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const jsonData = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Тело ответа содержит все необходимые поля комментария\", function () {\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData).to.have.property('text');\r",
                  "    pm.expect(jsonData).to.have.property('user');\r",
                  "    pm.expect(jsonData).to.have.property('event');\r",
                  "    pm.expect(jsonData).to.have.property('createdOn');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе соответствуют отправленным\", function () {\r",
                  "    const sentBody = JSON.parse(pm.request.body.raw);\r",
                  "    const userId = pm.collectionVariables.get(\"userId\");\r",
                  "    const eventId = pm.collectionVariables.get(\"eventId\");\r",
                  "    \r",
                  "    pm.expect(jsonData.text).to.eql(sentBody.text, \"Текст комментария не совпадает\");\r",
                  "\r",
                  "    pm.expect(jsonData.createdOn).to.match(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/, \"Формат даты создания некорректен\");\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"patchedText\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария другим пользователем",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 409 Conflict\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"newTTTTEEEEXXXTTTT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "2"
                },
                {
                  "key": "eventId",
                  "value": "1"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "userId",
      "value": 2
    },
    {
      "key": "eventId",
      "value": 1
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": ""
    },
    {
      "key": "expectedCommentText",
      "value": ""
    }
  ]
}